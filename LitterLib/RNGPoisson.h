/*	File:		RNGPoissons.h	Contains:	Header file for RNGPoissons.c.	Written by:	Peter Castine	Copyright:	© 2001-2006 Peter Castine	Change History (most recent first):         <1>   23Ð3Ð2006    pc      first checked in.*//****************************************************************************************** ******************************************************************************************/#pragma once#pragma mark ¥ Include Files#ifndef __LITTERLIB_H__	#include "LitterLib.h"#endif#ifndef __MISCUTILS_H__	#include "MiscUtils.h"#endif#ifndef __TAUS88_H__	#include "Taus88.h"#endif//#include <math.h>#pragma mark ¥ Constantsenum poissonAlg {	algUndef		= -1,		// Caller may need to flag not having asked	algConstZero,				// lambda == 0	algDirect,	algInversion,	algReject,//	algLogistic,		algCount	};#pragma mark ¥ Type Definitionstypedef enum poissonAlg ePoisAlg;typedef struct poisInvParams {	double	lambda,			thresh;			} tPoisInvParams;typedef struct poisRejParams {	double	lambda,			sqrt2Lambda,		// = sqrt(2 * lambda)			logLambda,			// = log(lambda)			lambdaMagic;		// = lambda * lnLambda - log(lambda!)			} tPoisRejParams;/*	// Dagpunar's "Logistic" algorithm for large lambdatypedef struct poisDLParams {	double	lambda,			kappa,			beta,			gamma,			delta1,			delta2;			} tPoisDLParams;*/#pragma mark ¥ Global Variables#pragma mark ¥ Function PrototypesePoisAlg	RecommendPoisAlg(double);	// Direct generationstatic inline double	CalcPoisDirThresh	(double);long					GenPoissonDir		(double, tRandomFunc, void*);long					GenPoissonDirTaus88	(double, tTaus88Data*);	// Inversion algorithmstatic inline void	CalcPoisInvParams	(tPoisInvParams*, double);long				GenPoissonInv		(const tPoisInvParams*, tRandomFunc, void*);long				GenPoissonInvTaus88	(const tPoisInvParams*, tTaus88Data*);	// Ahrens & Dieter (?) rejection algorithmvoid				CalcPoisRejParams	(tPoisRejParams*, double);long				GenPoissonRej		(const tPoisRejParams*, tRandomFunc, void*);long				GenPoissonRejTaus88	(const tPoisRejParams*, tTaus88Data*);/*	// Dagpunar's rejection-from-logistic-distribution algorithmvoid	CalcPoisDLParams	(tPoisDLParams*, double);long	GenPoissonDL		(const tPoisDLParams*, tRandomFunc, void*);long	GenPoissonDLTaus88	(const tPoisDLParams*, tTaus88Data*);*/#pragma mark -#pragma mark ¥ Inline Functions & Macros	static inline double CalcPoisDirThresh(double iLambda)				{ return exp(-iLambda); }static inline void CalcPoisInvParams(tPoisInvParams* oParams, double iLambda)				{ oParams->lambda = iLambda; oParams->thresh = exp(-iLambda); }