/*	File:		RNGDistBeta.h	Contains:	Header file for RNGDistBeta.c.	Written by:	Peter Castine	Copyright:	© 2001-2006 Peter Castine	Change History (most recent first):         <1>     16Ð3Ð06    pc      first checked in.*//****************************************************************************************** ******************************************************************************************/#pragma once#pragma mark ¥ Include Files#ifndef __LITTERLIB_H__	#include "LitterLib.h"#endif#ifndef __MISCUTILS_H__	#include "MiscUtils.h"#endif#ifndef __TAUS88_H__	#include "Taus88.h"#endif#include <math.h>#pragma mark ¥ Constantsenum betaAlg {	algUndef		= -1,		// Caller may need to flag not having asked	algConstZero,				// a == 0 && b > 0	algConstOne,				// a > 0 && b == 0	algIndeterm,				// a == b == 0	algUniform,					// a == b == 1.0	algArcSine,					// a == b == 0.5	algJoehnk,					// a, b <= 0.5 (at least one strictly less than)	algChengBB,					// a, b > 1.0	algChengBC,					// only one of a, b <= 1.0		algCount	};#pragma mark ¥ Type Definitionstypedef enum betaAlg eBetaAlg;typedef struct jkParams {		double		a1,				// 1/a					b1;				// 1/b		} tJKParams;typedef struct bbParams {		Boolean		mirror;		double		a,					b,					alpha,					beta,					gamma;		} tBBParams;typedef struct bcParams {		Boolean		mirror;		double		a,					b,					alpha,					beta,					k1,					k2,					maxExp;		} tBCParams;#pragma mark ¥ Global Variables#pragma mark ¥ Function PrototypeseBetaAlg	RecommendBetaAlg(double, double);	// Jšhnk algorithmvoid	CalcJKParams	(tJKParams*, double, double);double	GenBetaJK		(const tJKParams*, tRandomFunc, void*);double	GenBetaJKTaus88	(const tJKParams*, tTaus88Data*);	// Cheng BB algorithmvoid	CalcBBParams	(tBBParams*, double, double);double	GenBetaBB		(const tBBParams*, tRandomFunc, void*);double	GenBetaBBTaus88	(const tBBParams*, tTaus88Data*);	// Cheng BC algorithmvoid	CalcBCParams	(tBCParams*, double, double);double	GenBetaBC		(const tBCParams*, tRandomFunc, void*);double	GenBetaBCTaus88	(const tBCParams*, tTaus88Data*);	// arcsine algorithmstatic inline double	GenArcsine		(tRandomFunc, void*);static inline double	GenArcsineTaus88(tTaus88Data*);					 	// This one's so simple we don't need a Taus88-optimized version, we don't need	// to precalc parameters, and we can inline it below		// All the other "algorithms" are so trivial that even bothering to define inline	// functions looking like	//	//		double GenBetaConstZero(void)		{ return 0.0; }	//		double GenBetaConstOne(void)		{ return 1.0; }	//		double GenBetaConstUnif(...)		{ return ULong2Unit_ZO(...); }	//		double GenBetaConstIndeterm(...)	{ return (double) iFunc(iData) &x01 ; }	//	// seems more trouble than it's worth. 	// I would do this if we were fully object-oriented, but the current architecture	// still requires the caller to know a little about what's going on inside this code.#pragma mark -#pragma mark ¥ Inline Functions & Macros	static inline double GenArcsine(tRandomFunc iFunc, void* iData)	{ return 0.5 * (1.0 - sin( (ULong2Unit_ZO( iFunc(iData) ) - 0.5) * kPi)); }static inline double GenArcsineTaus88(tTaus88Data* iData)	{ return 0.5 * (1.0 - sin( (ULong2Unit_ZO( Taus88(iData) ) - 0.5) * kPi)); }