/*	File:		BinomialRNG.h	Contains:	Header file for BinomialRNG.c.	Written by:	Peter Castine	Copyright:	© 2001-2006 Peter Castine	Change History (most recent first):         <2>   26Ð4Ð2006    pc      Renamed LitterLib files for Binomial distribution         <1>   30Ð3Ð2006    pc      first checked in (after renaming)*//****************************************************************************************** ******************************************************************************************/#pragma once#ifndef RNGBINOMIAL_H#define RNGBINOMIAL_H#pragma mark ¥ Include Files#ifndef __MACTYPES__	#include <MacTypes.h>									// For UInt32#endif#ifndef __MISCUTILS_H__	#include "MiscUtils.h"#endif#ifndef __TAUS88_H__	#include "Taus88.h"#endif#pragma mark ¥ Constants#pragma mark ¥ Type Definitionstypedef struct binvParams {	Boolean	mirror;			// true if p is really > 0.5							// For pragmatic reasons calculate with p <= 0.5	UInt32	n;	double	p,			qPowN,			// q^n			pOverQ;			// p / (1-p) 	} tBINVParams; typedef struct {	Boolean	mirror;					// true if p is really > 0.5									// For pragmatic reasons calculate with p <= 0.5										double	p,						// Probability of success			n,						// Number of trials (as double!)			q,						// 1-p			var,					// n * p * q			mm,						// floor(n*p + p)			p1, p2, p3, p4,			// cumulative area of tri, para, exp tails			xm, xl, xr,			c,			lambdaL, lambdaR;	} tBTPEParams; #pragma mark ¥ Global Variables#pragma mark ¥ Function PrototypesUInt32					GenDevBinomialFC		(UInt32, tRandomFunc, void*);UInt32					GenDevBinomialFCTaus88	(UInt32, tTaus88Data*);static inline UInt32	CalcBFThreshhold		(double);UInt32					GenDevBinomialBF		(UInt32, UInt32, tRandomFunc, void*);UInt32					GenDevBinomialBFTaus88	(UInt32, UInt32, tTaus88Data*);void					CalcBINVParams			(tBINVParams*, UInt32, double);UInt32					GenBinomialBINV			(const tBINVParams*, tRandomFunc, void*);void					CalcBTPEParams			(tBTPEParams*, UInt32, double);UInt32					GenBinomialBTPE			(const tBTPEParams*, tRandomFunc, void*);#pragma mark -#pragma mark ¥ Inline functionsstatic inline UInt32 CalcBFThreshhold(double iProb)	{	if		(iProb < 0.0)	return 0;	else if (iProb > 1.0)	return kULongMax;	else					return (UInt32) (((double) kULongMax) * iProb);	}	#endif		// RNGBINOMIAL_H