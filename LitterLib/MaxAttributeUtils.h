/* *  MaxAttributeUtiles.h *  iCE/Litter * *  Created by Peter Castine on 17.12.10. *  Copyright 2010 4-15 Music & Technology. All rights reserved. * *	Utilities for initializing class attributes. *	Requires obex support (Max 5 or Max 4 w/Jitter) * *//*********************************** INCLUDE ONCE WRAPPER **********************************/#pragma once#ifndef LITTER_MAXATTRUTILS_H#define LITTER_MAXATTRUTILS_H#pragma mark • Include Files#include "ext.h"#include "ext_proto.h"#include "ext_mess.h"#include "ext_obex.h"#include "ext_obex_util.h"#pragma mark • Constants	// Indices for attribute typesenum attrType {	aTypeChar	= 0,	aTypeLong,	aTypeFloat,	aTypeDouble,	aTypeAtom,	aTypeSymPtr,	aTypeObjPtr,		aTypeCount,		// Common "pseudo-types"	aTypeRect,	aTypeColor,	aTypeFont	};enum attrStyle {	aStyleText	= 0,	aStyleToggle,	aStyleRGBA,	aStylePopupVal,	aStylePopupInd,	aStyleRect,	asFont,	aStyleFile,		aStyleCount	};	enum attrBooleans {	attrNotStatic	= false,	attrStatic		= true,	attrDontSave	= false,	attrSave		= true,	attrDontPaint	= false,	attrPaint		= true,	attrImpOrder	= false,		// Implicit order (whatever Max thinks best)	attrExpOrder	= true,			// Explicit order (order of appearance in tAttrData[])		attrNoOffset	= 0,	attrSingleton	= 1,	attrNoFlags		= 0	};#pragma mark • Data Structurestypedef enum attrType	eAttrType;typedef enum attrStyle	eAttrStyle;typedef struct attrFilter {	double			min,					max;	Boolean			useMin,					useMax;	} tAttrFilterData;typedef struct attrData {	char*				name;	Boolean				isStatic,						save,						paint,						ordered;			// If false, let Max handle ordering of attribute,											// otherwise we will set the order attribute attribute											// to maintain attributes in the order they're defined	eAttrType			type;	long				offset,						count,				// 1 indicates singleton, otherwise array of type											// Ignore count if no offset 						flags;	method				getter,						setter,						customizer;			// method to set attribute attributes not supported by 											// LitterInitClassAttributes()											// Can we get by without this??	tAttrFilterData*	filterData;	eAttrStyle			style;	char*				popupStr;	char*				initStr;	char*				label;	char*				category;	} tAttrData;#pragma mark • Functionsvoid	LitterInitClassAttributes(t_class*, const tAttrData[], unsigned long);/********************************* END INCLUDE ONCE WRAPPER ********************************/#endif